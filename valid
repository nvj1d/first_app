from flask import Flask, render_template, request
#for VGG16:
from keras.applications.vgg16 import  VGG16
from tensorflow.keras.preprocessing import image
from tensorflow.keras.applications.vgg16 import preprocess_input, decode_predictions
import numpy as np
import os
import shutil

#for inception:
from keras.applications import InceptionV3
from keras.applications import imagenet_utils
from tensorflow.keras.utils import img_to_array
from tensorflow.keras.utils import load_img
from keras.applications.inception_v3 import preprocess_input
# import cv2

# for resnet
from tensorflow.keras.applications.resnet50 import ResNet50

# for VGG19
from keras.applications.vgg19 import VGG19

app = Flask(__name__)

our_list = ['minivan', 'limousine', 'sports_car', 'convertible', 'cab', 'racer', 'passenger_car', 'recreational_vehicle', 'pickup', 'police_van', 'minibus', 'moving_van', 'tow_truck', 'jeep', 'landrover', 'beach_wagon']


#download the models:
vgg16_model = VGG16(weights='imagenet')
Inception_model = InceptionV3(weights="imagenet")
resnet_model = ResNet50(weights='imagenet')
model_vgg19 = VGG19(weights="imagenet")

def vgg16_pred(image_path):
    img = image.load_img(image_path, color_mode='rgb', target_size=(224, 224))
#     display(img)
    x = image.img_to_array(img)
    x = np.expand_dims(x, axis=0)
    x = preprocess_input(x)
    features = vgg16_model.predict(x)
    p = decode_predictions(features)
    return p[0][0][1], p[0][0][2]

def inception_pred(image_path):
    img = load_img(image_path)
    img = img.resize((299,299))
    img_array = img_to_array(img)
    img_array = np.expand_dims(img_array, axis=0)
    img_array = preprocess_input(img_array)
    prediction = Inception_model.predict(img_array)
    actual_prediction = decode_predictions(prediction)
    return actual_prediction[0][0][1], actual_prediction[0][0][2]

def resnet_pred(img_path):
    img = image.load_img(img_path, target_size=(224, 224))
    x = image.img_to_array(img)
    x = np.expand_dims(x, axis=0)
    x = preprocess_input(x)
    scores = resnet_model.predict(x)
    actual_prediction = decode_predictions(scores)
    return actual_prediction[0][0][1], actual_prediction[0][0][2]

def vgg19_pred(image_path):
    img = image.load_img(image_path, color_mode='rgb', target_size=(224, 224))
    #     display(img)
    x = image.img_to_array(img)
    x = np.expand_dims(x, axis=0)
    x = preprocess_input(x)
    features = model_vgg19.predict(x)
    p = decode_predictions(features)
    return p[0][0][1], p[0][0][2]

models_list = [vgg16_pred, inception_pred, resnet_pred, vgg19_pred]
def get_pred(image_path):
    sum_pred = 0
    for func in models_list:
        classp, pred = func(image_path)
        for pred_class in our_list:
            if pred_class == classp:
                sum_pred += pred
    if sum_pred >= 0.5:
        return "car"
    else:
        return "not car!"

#routes:
@app.route('/', methods = ["GET", "POST"])
def home():
    return render_template('index.html')

@app.route('/about')
def about():
    return "made in morocco baby!"

@app.route('/submit', methods = ["GET", "POST"])
def get_output():
    if request.method == 'POST':
        img = request.files['my_image']
        img_path = "static/" + img.filename
        img.save(img_path)

        p  = get_pred(img_path)
    return render_template("index.html", prediction = p, img_path = img_path)

if __name__ == '__main__':
    app.run(debug=True)
